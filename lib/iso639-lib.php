<?php
/*
 * CQPweb: a user-friendly interface to the IMS Corpus Query Processor
 * Copyright (C) 2008-today Andrew Hardie and contributors
 *
 * See http://cwb.sourceforge.net/cqpweb.php
 *
 * This file is part of CQPweb.
 * 
 * CQPweb is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CQPweb is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * 
 * ISO 639 language codes: a static class with data and functions related to this standard.
 * 
 * Data from:
 * 
 * https://www.loc.gov/standards/iso639-2/ascii_8bits.html
 * 
 */


class Iso639
{
	public static function is_valid_code($code)
	{
		return (false !== self::lang_name($code));

	}
	public static function lang_name($code)
	{
		$code = strtolower($code);

		if (2 == strlen($code))
			if (!array_key_exists($code, self::MAP_2_TO_3))
				return false;

		return ( array_key_exists($code, self::MAP_TO_NAME) ? self::MAP_TO_NAME[$code] : false );
	}

	// what other functions might be handy? One to generate an array of html <options> perhaps? or the necessary data for a JS picker?


	private function __construct() {}



	const MAP_2_TO_3 = array(
			  'aa' => 'aar',
			  'ab' => 'abk',
			  'ae' => 'ave',
			  'af' => 'afr',
			  'ak' => 'aka',
			  'am' => 'amh',
			  'an' => 'arg',
			  'ar' => 'ara',
			  'as' => 'asm',
			  'av' => 'ava',
			  'ay' => 'aym',
			  'az' => 'aze',
			  'ba' => 'bak',
			  'be' => 'bel',
			  'bg' => 'bul',
			  'bh' => 'bih',
			  'bi' => 'bis',
			  'bm' => 'bam',
			  'bn' => 'ben',
			  'bo' => 'bod',
			  'br' => 'bre',
			  'bs' => 'bos',
			  'ca' => 'cat',
			  'ce' => 'che',
			  'ch' => 'cha',
			  'co' => 'cos',
			  'cr' => 'cre',
			  'cs' => 'ces',
			  'cu' => 'chu',
			  'cv' => 'chv',
			  'cy' => 'cym',
			  'da' => 'dan',
			  'de' => 'deu',
			  'dv' => 'div',
			  'dz' => 'dzo',
			  'ee' => 'ewe',
			  'el' => 'ell',
			  'en' => 'eng',
			  'eo' => 'epo',
			  'es' => 'spa',
			  'et' => 'est',
			  'eu' => 'eus',
			  'fa' => 'fas',
			  'ff' => 'ful',
			  'fi' => 'fin',
			  'fj' => 'fij',
			  'fo' => 'fao',
			  'fr' => 'fra',
			  'fy' => 'fry',
			  'ga' => 'gle',
			  'gd' => 'gla',
			  'gl' => 'glg',
			  'gn' => 'grn',
			  'gu' => 'guj',
			  'gv' => 'glv',
			  'ha' => 'hau',
			  'he' => 'heb',
			  'hi' => 'hin',
			  'ho' => 'hmo',
			  'hr' => 'hrv',
			  'ht' => 'hat',
			  'hu' => 'hun',
			  'hy' => 'hye',
			  'hz' => 'her',
			  'ia' => 'ina',
			  'id' => 'ind',
			  'ie' => 'ile',
			  'ig' => 'ibo',
			  'ii' => 'iii',
			  'ik' => 'ipk',
			  'io' => 'ido',
			  'is' => 'isl',
			  'it' => 'ita',
			  'iu' => 'iku',
			  'ja' => 'jpn',
			  'jv' => 'jav',
			  'ka' => 'kat',
			  'kg' => 'kon',
			  'ki' => 'kik',
			  'kj' => 'kua',
			  'kk' => 'kaz',
			  'kl' => 'kal',
			  'km' => 'khm',
			  'kn' => 'kan',
			  'ko' => 'kor',
			  'kr' => 'kau',
			  'ks' => 'kas',
			  'ku' => 'kur',
			  'kv' => 'kom',
			  'kw' => 'cor',
			  'ky' => 'kir',
			  'la' => 'lat',
			  'lb' => 'ltz',
			  'lg' => 'lug',
			  'li' => 'lim',
			  'ln' => 'lin',
			  'lo' => 'lao',
			  'lt' => 'lit',
			  'lu' => 'lub',
			  'lv' => 'lav',
			  'mg' => 'mlg',
			  'mh' => 'mah',
			  'mi' => 'mri',
			  'mk' => 'mkd',
			  'ml' => 'mal',
			  'mn' => 'mon',
			  'mr' => 'mar',
			  'ms' => 'msa',
			  'mt' => 'mlt',
			  'my' => 'mya',
			  'na' => 'nau',
			  'nb' => 'nob',
			  'nd' => 'nde',
			  'ne' => 'nep',
			  'ng' => 'ndo',
			  'nl' => 'nld',
			  'nn' => 'nno',
			  'no' => 'nor',
			  'nr' => 'nbl',
			  'nv' => 'nav',
			  'ny' => 'nya',
			  'oc' => 'oci',
			  'oj' => 'oji',
			  'om' => 'orm',
			  'or' => 'ori',
			  'os' => 'oss',
			  'pa' => 'pan',
			  'pi' => 'pli',
			  'pl' => 'pol',
			  'ps' => 'pus',
			  'pt' => 'por',
			  'qu' => 'que',
			  'rm' => 'roh',
			  'rn' => 'run',
			  'ro' => 'ron',
			  'ru' => 'rus',
			  'rw' => 'kin',
			  'sa' => 'san',
			  'sc' => 'srd',
			  'sd' => 'snd',
			  'se' => 'sme',
			  'sg' => 'sag',
			  'si' => 'sin',
			  'sk' => 'slk',
			  'sl' => 'slv',
			  'sm' => 'smo',
			  'sn' => 'sna',
			  'so' => 'som',
			  'sq' => 'sqi',
			  'sr' => 'srp',
			  'ss' => 'ssw',
			  'st' => 'sot',
			  'su' => 'sun',
			  'sv' => 'swe',
			  'sw' => 'swa',
			  'ta' => 'tam',
			  'te' => 'tel',
			  'tg' => 'tgk',
			  'th' => 'tha',
			  'ti' => 'tir',
			  'tk' => 'tuk',
			  'tl' => 'tgl',
			  'tn' => 'tsn',
			  'to' => 'ton',
			  'tr' => 'tur',
			  'ts' => 'tso',
			  'tt' => 'tat',
			  'tw' => 'twi',
			  'ty' => 'tah',
			  'ug' => 'uig',
			  'uk' => 'ukr',
			  'ur' => 'urd',
			  'uz' => 'uzb',
			  've' => 'ven',
			  'vi' => 'vie',
			  'vo' => 'vol',
			  'wa' => 'wln',
			  'wo' => 'wol',
			  'xh' => 'xho',
			  'yi' => 'yid',
			  'yo' => 'yor',
			  'za' => 'zha',
			  'zh' => 'zho',
			  'zu' => 'zul',
		);



	const MAP_TO_NAME = array(
			  'aar' => 'Afar',
			  'abk' => 'Abkhazian',
			  'ace' => 'Achinese',
			  'ach' => 'Acoli',
			  'ada' => 'Adangme',
			  'ady' => 'Adyghe',
			  'afa' => 'Afro-Asiatic languages',
			  'afh' => 'Afrihili',
			  'afr' => 'Afrikaans',
			  'ain' => 'Ainu',
			  'aka' => 'Akan',
			  'akk' => 'Akkadian',
			  'alb' => 'Albanian',
			  'ale' => 'Aleut',
			  'alg' => 'Algonquian languages',
			  'alt' => 'Southern Altai',
			  'amh' => 'Amharic',
			  'ang' => 'Old English',
			  'anp' => 'Angika',
			  'apa' => 'Apache languages',
			  'ara' => 'Arabic',
			  'arc' => 'Imperial Aramaic',
			  'arg' => 'Aragonese',
			  'arm' => 'Armenian',
			  'arn' => 'Mapudungun',
			  'arp' => 'Arapaho',
			  'art' => 'Artificial languages',
			  'arw' => 'Arawak',
			  'asm' => 'Assamese',
			  'ast' => 'Asturian',
			  'ath' => 'Athapascan languages',
			  'aus' => 'Australian languages',
			  'ava' => 'Avaric',
			  'ave' => 'Avestan',
			  'awa' => 'Awadhi',
			  'aym' => 'Aymara',
			  'aze' => 'Azerbaijani',
			  'bad' => 'Banda languages',
			  'bai' => 'Bamileke languages',
			  'bak' => 'Bashkir',
			  'bal' => 'Baluchi',
			  'bam' => 'Bambara',
			  'ban' => 'Balinese',
			  'baq' => 'Basque',
			  'bas' => 'Basa',
			  'bat' => 'Baltic languages',
			  'bej' => 'Beja',
			  'bel' => 'Belarusian',
			  'bem' => 'Bemba',
			  'ben' => 'Bengali',
			  'ber' => 'Berber languages',
			  'bho' => 'Bhojpuri',
			  'bih' => 'Bihari languages',
			  'bik' => 'Bikol',
			  'bin' => 'Bini',
			  'bis' => 'Bislama',
			  'bla' => 'Siksika',
			  'bnt' => 'Bantu (Other)',
			  'bod' => 'Tibetan',
			  'bos' => 'Bosnian',
			  'bra' => 'Braj',
			  'bre' => 'Breton',
			  'btk' => 'Batak languages',
			  'bua' => 'Buriat',
			  'bug' => 'Buginese',
			  'bul' => 'Bulgarian',
			  'bur' => 'Burmese',
			  'byn' => 'Blin',
			  'cad' => 'Caddo',
			  'cai' => 'Central American Indian languages',
			  'car' => 'Galibi Carib',
			  'cat' => 'Catalan',
			  'cau' => 'Caucasian languages',
			  'ceb' => 'Cebuano',
			  'cel' => 'Celtic languages',
			  'ces' => 'Czech',
			  'cha' => 'Chamorro',
			  'chb' => 'Chibcha',
			  'che' => 'Chechen',
			  'chg' => 'Chagatai',
			  'chi' => 'Chinese',
			  'chk' => 'Chuukese',
			  'chm' => 'Mari',
			  'chn' => 'Chinook jargon',
			  'cho' => 'Choctaw',
			  'chp' => 'Chipewyan',
			  'chr' => 'Cherokee',
			  'chu' => 'Old Church Slavonic',
			  'chv' => 'Chuvash',
			  'chy' => 'Cheyenne',
			  'cmc' => 'Chamic languages',
			  'cnr' => 'Montenegrin',
			  'cop' => 'Coptic',
			  'cor' => 'Cornish',
			  'cos' => 'Corsican',
			  'cpe' => 'Creoles and pidgins, English based',
			  'cpf' => 'Creoles and pidgins, French-based ',
			  'cpp' => 'Creoles and pidgins, Portuguese-based ',
			  'cre' => 'Cree',
			  'crh' => 'Crimean Tatar',
			  'crp' => 'Creoles and pidgins ',
			  'csb' => 'Kashubian',
			  'cus' => 'Cushitic languages',
			  'cym' => 'Welsh',
			  'cze' => 'Czech',
			  'dak' => 'Dakota',
			  'dan' => 'Danish',
			  'dar' => 'Dargwa',
			  'day' => 'Land Dayak languages',
			  'del' => 'Delaware',
			  'den' => 'Slave (Athapascan)',
			  'deu' => 'German',
			  'dgr' => 'Dogrib',
			  'din' => 'Dinka',
			  'div' => 'Divehi',
			  'doi' => 'Dogri',
			  'dra' => 'Dravidian languages',
			  'dsb' => 'Lower Sorbian',
			  'dua' => 'Duala',
			  'dum' => 'Middle Dutch',
			  'dut' => 'Dutch',
			  'dyu' => 'Dyula',
			  'dzo' => 'Dzongkha',
			  'efi' => 'Efik',
			  'egy' => 'Ancient Egyptian',
			  'eka' => 'Ekajuk',
			  'ell' => 'Greek',
			  'elx' => 'Elamite',
			  'eng' => 'English',
			  'enm' => 'Middle English',
			  'epo' => 'Esperanto',
			  'est' => 'Estonian',
			  'eus' => 'Basque',
			  'ewe' => 'Ewe',
			  'ewo' => 'Ewondo',
			  'fan' => 'Fang',
			  'fao' => 'Faroese',
			  'fas' => 'Persian',
			  'fat' => 'Fanti',
			  'fij' => 'Fijian',
			  'fil' => 'Filipino',
			  'fin' => 'Finnish',
			  'fiu' => 'Finno-Ugrian languages',
			  'fon' => 'Fon',
			  'fra' => 'French',
			  'fre' => 'French',
			  'frm' => 'Middle French',
			  'fro' => 'Old French',
			  'frr' => 'Northern Frisian',
			  'frs' => 'Eastern Frisian',
			  'fry' => 'Western Frisian',
			  'ful' => 'Fulah',
			  'fur' => 'Friulian',
			  'gaa' => 'Ga',
			  'gay' => 'Gayo',
			  'gba' => 'Gbaya',
			  'gem' => 'Germanic languages',
			  'geo' => 'Georgian',
			  'ger' => 'German',
			  'gez' => 'Geez',
			  'gil' => 'Gilbertese',
			  'gla' => 'Scottish Gaelic',
			  'gle' => 'Irish',
			  'glg' => 'Galician',
			  'glv' => 'Manx',
			  'gmh' => 'Middle High German',
			  'goh' => 'Old High German',
			  'gon' => 'Gondi',
			  'gor' => 'Gorontalo',
			  'got' => 'Gothic',
			  'grb' => 'Grebo',
			  'grc' => 'Ancient Greek',
			  'gre' => 'Greek',
			  'grn' => 'Guarani',
			  'gsw' => 'Swiss German',
			  'guj' => 'Gujarati',
			  'gwi' => 'Gwich\'in',
			  'hai' => 'Haida',
			  'hat' => 'Haitian',
			  'hau' => 'Hausa',
			  'haw' => 'Hawaiian',
			  'heb' => 'Hebrew',
			  'her' => 'Herero',
			  'hil' => 'Hiligaynon',
			  'him' => 'Himachali languages',
			  'hin' => 'Hindi',
			  'hit' => 'Hittite',
			  'hmn' => 'Hmong',
			  'hmo' => 'Hiri Motu',
			  'hrv' => 'Croatian',
			  'hsb' => 'Upper Sorbian',
			  'hun' => 'Hungarian',
			  'hup' => 'Hupa',
			  'hye' => 'Armenian',
			  'iba' => 'Iban',
			  'ibo' => 'Igbo',
			  'ice' => 'Icelandic',
			  'ido' => 'Ido',
			  'iii' => 'Sichuan Yi',
			  'ijo' => 'Ijo languages',
			  'iku' => 'Inuktitut',
			  'ile' => 'Interlingue',
			  'ilo' => 'Iloko',
			  'ina' => 'Interlingua',
			  'inc' => 'Indic languages',
			  'ind' => 'Indonesian',
			  'ine' => 'Indo-European languages',
			  'inh' => 'Ingush',
			  'ipk' => 'Inupiaq',
			  'ira' => 'Iranian languages',
			  'iro' => 'Iroquoian languages',
			  'isl' => 'Icelandic',
			  'ita' => 'Italian',
			  'jav' => 'Javanese',
			  'jbo' => 'Lojban',
			  'jpn' => 'Japanese',
			  'jpr' => 'Judeo-Persian',
			  'jrb' => 'Judeo-Arabic',
			  'kaa' => 'Kara-Kalpak',
			  'kab' => 'Kabyle',
			  'kac' => 'Kachin',
			  'kal' => 'Kalaallisut',
			  'kam' => 'Kamba',
			  'kan' => 'Kannada',
			  'kar' => 'Karen languages',
			  'kas' => 'Kashmiri',
			  'kat' => 'Georgian',
			  'kau' => 'Kanuri',
			  'kaw' => 'Kawi',
			  'kaz' => 'Kazakh',
			  'kbd' => 'Kabardian',
			  'kha' => 'Khasi',
			  'khi' => 'Khoisan languages',
			  'khm' => 'Central Khmer',
			  'kho' => 'Khotanese',
			  'kik' => 'Kikuyu',
			  'kin' => 'Kinyarwanda',
			  'kir' => 'Kirghiz',
			  'kmb' => 'Kimbundu',
			  'kok' => 'Konkani',
			  'kom' => 'Komi',
			  'kon' => 'Kongo',
			  'kor' => 'Korean',
			  'kos' => 'Kosraean',
			  'kpe' => 'Kpelle',
			  'krc' => 'Karachay-Balkar',
			  'krl' => 'Karelian',
			  'kro' => 'Kru languages',
			  'kru' => 'Kurukh',
			  'kua' => 'Kuanyama',
			  'kum' => 'Kumyk',
			  'kur' => 'Kurdish',
			  'kut' => 'Kutenai',
			  'lad' => 'Ladino',
			  'lah' => 'Lahnda',
			  'lam' => 'Lamba',
			  'lao' => 'Lao',
			  'lat' => 'Latin',
			  'lav' => 'Latvian',
			  'lez' => 'Lezghian',
			  'lim' => 'Limburgan',
			  'lin' => 'Lingala',
			  'lit' => 'Lithuanian',
			  'lol' => 'Mongo',
			  'loz' => 'Lozi',
			  'ltz' => 'Luxembourgish',
			  'lua' => 'Luba-Lulua',
			  'lub' => 'Luba-Katanga',
			  'lug' => 'Ganda',
			  'lui' => 'Luiseno',
			  'lun' => 'Lunda',
			  'luo' => 'Luo',
			  'lus' => 'Lushai',
			  'mac' => 'Macedonian',
			  'mad' => 'Madurese',
			  'mag' => 'Magahi',
			  'mah' => 'Marshallese',
			  'mai' => 'Maithili',
			  'mak' => 'Makasar',
			  'mal' => 'Malayalam',
			  'man' => 'Mandingo',
			  'mao' => 'Maori',
			  'map' => 'Austronesian languages',
			  'mar' => 'Marathi',
			  'mas' => 'Masai',
			  'may' => 'Malay',
			  'mdf' => 'Moksha',
			  'mdr' => 'Mandar',
			  'men' => 'Mende',
			  'mga' => 'Middle Irish',
			  'mic' => 'Mi\'kmaq',
			  'min' => 'Minangkabau',
			  'mis' => 'Uncoded languages',
			  'mkd' => 'Macedonian',
			  'mkh' => 'Mon-Khmer languages',
			  'mlg' => 'Malagasy',
			  'mlt' => 'Maltese',
			  'mnc' => 'Manchu',
			  'mni' => 'Manipuri',
			  'mno' => 'Manobo languages',
			  'moh' => 'Mohawk',
			  'mon' => 'Mongolian',
			  'mos' => 'Mossi',
			  'mri' => 'Maori',
			  'msa' => 'Malay',
			  'mul' => 'Multiple languages',
			  'mun' => 'Munda languages',
			  'mus' => 'Creek',
			  'mwl' => 'Mirandese',
			  'mwr' => 'Marwari',
			  'mya' => 'Burmese',
			  'myn' => 'Mayan languages',
			  'myv' => 'Erzya',
			  'nah' => 'Nahuatl languages',
			  'nai' => 'North American Indian languages',
			  'nap' => 'Neapolitan',
			  'nau' => 'Nauru',
			  'nav' => 'Navajo',
			  'nbl' => 'South Ndebele',
			  'nde' => 'North Ndebele',
			  'ndo' => 'Ndonga',
			  'nds' => 'Low German',
			  'nep' => 'Nepali',
			  'new' => 'Newari',
			  'nia' => 'Nias',
			  'nic' => 'Niger-Kordofanian languages',
			  'niu' => 'Niuean',
			  'nld' => 'Dutch',
			  'nno' => 'Norwegian Nynorsk',
			  'nob' => 'Norwegian Bokmål',
			  'nog' => 'Nogai',
			  'non' => 'Norse, Old',
			  'nor' => 'Norwegian',
			  'nqo' => 'N\'Ko',
			  'nso' => 'Pedi',
			  'nub' => 'Nubian languages',
			  'nwc' => 'Classical Newari',
			  'nya' => 'Chichewa',
			  'nym' => 'Nyamwezi',
			  'nyn' => 'Nyankole',
			  'nyo' => 'Nyoro',
			  'nzi' => 'Nzima',
			  'oci' => 'Occitan',
			  'oji' => 'Ojibwa',
			  'ori' => 'Oriya',
			  'orm' => 'Oromo',
			  'osa' => 'Osage',
			  'oss' => 'Ossetian',
			  'ota' => 'Ottoman Turkish',
			  'oto' => 'Otomian languages',
			  'paa' => 'Papuan languages',
			  'pag' => 'Pangasinan',
			  'pal' => 'Pahlavi',
			  'pam' => 'Pampanga',
			  'pan' => 'Panjabi',
			  'pap' => 'Papiamento',
			  'pau' => 'Palauan',
			  'peo' => 'Old Persian',
			  'per' => 'Persian',
			  'phi' => 'Philippine languages',
			  'phn' => 'Phoenician',
			  'pli' => 'Pali',
			  'pol' => 'Polish',
			  'pon' => 'Pohnpeian',
			  'por' => 'Portuguese',
			  'pra' => 'Prakrit languages',
			  'pro' => 'Old Provençal',
			  'pus' => 'Pashto',
			  'que' => 'Quechua',
			  'raj' => 'Rajasthani',
			  'rap' => 'Rapanui',
			  'rar' => 'Rarotongan',
			  'roa' => 'Romance languages',
			  'roh' => 'Romansh',
			  'rom' => 'Romany',
			  'ron' => 'Romanian',
			  'rum' => 'Romanian',
			  'run' => 'Rundi',
			  'rup' => 'Aromanian',
			  'rus' => 'Russian',
			  'sad' => 'Sandawe',
			  'sag' => 'Sango',
			  'sah' => 'Yakut',
			  'sai' => 'South American Indian (Other)',
			  'sal' => 'Salishan languages',
			  'sam' => 'Samaritan Aramaic',
			  'san' => 'Sanskrit',
			  'sas' => 'Sasak',
			  'sat' => 'Santali',
			  'scn' => 'Sicilian',
			  'sco' => 'Scots',
			  'sel' => 'Selkup',
			  'sem' => 'Semitic languages',
			  'sga' => 'Old Irish',
			  'sgn' => 'Sign Languages',
			  'shn' => 'Shan',
			  'sid' => 'Sidamo',
			  'sin' => 'Sinhala',
			  'sio' => 'Siouan languages',
			  'sit' => 'Sino-Tibetan languages',
			  'sla' => 'Slavic languages',
			  'slk' => 'Slovak',
			  'slo' => 'Slovak',
			  'slv' => 'Slovenian',
			  'sma' => 'Southern Sami',
			  'sme' => 'Northern Sami',
			  'smi' => 'Sami languages',
			  'smj' => 'Lule Sami',
			  'smn' => 'Inari Sami',
			  'smo' => 'Samoan',
			  'sms' => 'Skolt Sami',
			  'sna' => 'Shona',
			  'snd' => 'Sindhi',
			  'snk' => 'Soninke',
			  'sog' => 'Sogdian',
			  'som' => 'Somali',
			  'son' => 'Songhai languages',
			  'sot' => 'Sotho, Southern',
			  'spa' => 'Spanish',
			  'sqi' => 'Albanian',
			  'srd' => 'Sardinian',
			  'srn' => 'Sranan Tongo',
			  'srp' => 'Serbian',
			  'srr' => 'Serer',
			  'ssa' => 'Nilo-Saharan languages',
			  'ssw' => 'Swati',
			  'suk' => 'Sukuma',
			  'sun' => 'Sundanese',
			  'sus' => 'Susu',
			  'sux' => 'Sumerian',
			  'swa' => 'Swahili',
			  'swe' => 'Swedish',
			  'syc' => 'Classical Syriac',
			  'syr' => 'Syriac',
			  'tah' => 'Tahitian',
			  'tai' => 'Tai languages',
			  'tam' => 'Tamil',
			  'tat' => 'Tatar',
			  'tel' => 'Telugu',
			  'tem' => 'Timne',
			  'ter' => 'Tereno',
			  'tet' => 'Tetum',
			  'tgk' => 'Tajik',
			  'tgl' => 'Tagalog',
			  'tha' => 'Thai',
			  'tib' => 'Tibetan',
			  'tig' => 'Tigre',
			  'tir' => 'Tigrinya',
			  'tiv' => 'Tiv',
			  'tkl' => 'Tokelau',
			  'tlh' => 'Klingon',
			  'tli' => 'Tlingit',
			  'tmh' => 'Tamashek',
			  'tog' => 'Tonga (Nyasa)',
			  'ton' => 'Tonga (Tonga Islands)',
			  'tpi' => 'Tok Pisin',
			  'tsi' => 'Tsimshian',
			  'tsn' => 'Tswana',
			  'tso' => 'Tsonga',
			  'tuk' => 'Turkmen',
			  'tum' => 'Tumbuka',
			  'tup' => 'Tupi languages',
			  'tur' => 'Turkish',
			  'tut' => 'Altaic languages',
			  'tvl' => 'Tuvalu',
			  'twi' => 'Twi',
			  'tyv' => 'Tuvinian',
			  'udm' => 'Udmurt',
			  'uga' => 'Ugaritic',
			  'uig' => 'Uighur',
			  'ukr' => 'Ukrainian',
			  'umb' => 'Umbundu',
			  'und' => 'Undetermined',
			  'urd' => 'Urdu',
			  'uzb' => 'Uzbek',
			  'vai' => 'Vai',
			  'ven' => 'Venda',
			  'vie' => 'Vietnamese',
			  'vol' => 'Volapük',
			  'vot' => 'Votic',
			  'wak' => 'Wakashan languages',
			  'wal' => 'Walamo',
			  'war' => 'Waray',
			  'was' => 'Washo',
			  'wel' => 'Welsh',
			  'wen' => 'Sorbian languages',
			  'wln' => 'Walloon',
			  'wol' => 'Wolof',
			  'xal' => 'Kalmyk',
			  'xho' => 'Xhosa',
			  'yao' => 'Yao',
			  'yap' => 'Yapese',
			  'yid' => 'Yiddish',
			  'yor' => 'Yoruba',
			  'ypk' => 'Yupik languages',
			  'zap' => 'Zapotec',
			  'zbl' => 'Blissymbols',
			  'zen' => 'Zenaga',
			  'zgh' => 'Standard Moroccan Tamazight',
			  'zha' => 'Zhuang',
			  'zho' => 'Chinese',
			  'znd' => 'Zande languages',
			  'zul' => 'Zulu',
			  'zun' => 'Zuni',
			  'zxx' => 'No linguistic content',
			  'zza' => 'Zaza',
		);

}



/* comment this out to be able to use the func below */
__halt_compiler();

/** Create PHP code from an input file (from, LOC website: https://www.loc.gov/standards/iso639-2/ISO-639-2_utf-8.txt 
 *  This was used to generate the mappers in the Iso639 class above. */
function build_iso639_data($path = false, $french = false)
{
	/*
	LOC page explains the fields as follows: 

	0 An alpha-3 (bibliographic) code, 
	1 an alpha-3 (terminologic) code (when given), 
	2 an alpha-2 code (when given), 
	3 an English name,
	4 and a French name of a language

	... all separated by pipe (|) characters.
	*/ 

	/* odd-phrased names get fixed here. Incl cases with ";" where the correct choice is not the first choice. */
	$name_fixer = [
			'German, Old High (ca.750-1050)'       => 'Old High German',
			'German, Middle High (ca.1050-1500)'   => 'Middle High German',
			'Irish, Old (to 900)'                  => 'Old Irish',
			'Pushto; Pashto'                       => 'Pashto',
			'Provençal, Old (to 1500)'             => 'Old Provençal',
			'Persian, Old (ca.600-400 B.C.)'       => 'Old Persian',
			'Turkish, Ottoman (1500-1928)'         => 'Ottoman Turkish',
			'Occitan (post 1500); Provençal'       => 'Occitan',
			'Bokmål, Norwegian; Norwegian Bokmål'  => 'Norwegian Bokmål',
			'Nepal Bhasa; Newari'                  => 'Newari',
			'Ndebele, North; North Ndebele'        => 'North Ndebele',
			'Ndebele, South; South Ndebele'        => 'South Ndebele',
			'Irish, Middle (900-1200)'             => 'Middle Irish',
			'Luo (Kenya and Tanzania)'             => 'Luo',
			'Interlingua (International Auxiliary Language Association)'
			                                       => 'Interlingua',
			'Greek, Modern (1453-)'                => 'Greek',
			'Greek, Ancient (to 1453)'             => 'Ancient Greek',
			'Gaelic; Scottish Gaelic'              => 'Scottish Gaelic',
			'French, Old (842-ca.1400)'            => 'Old French',
			'French, Middle (ca.1400-1600)'        => 'Middle French',
			'English, Middle (1100-1500)'          => 'Middle English',
			'Egyptian (Ancient)'                   => 'Ancient Egyptian',
			'Dutch, Middle (ca.1050-1350)'         => 'Middle Dutch',
			'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic'
			                                       => 'Old Church Slavonic',
			'Official Aramaic (700-300 BCE); Imperial Aramaic (700-300 BCE)'
			                                       => 'Imperial Aramaic',
			'English, Old (ca.450-1100)'           => 'Old English',
	];

	$three_to_name = array();
	$two_to_three  = array();

	/* assume file in same directory. */
	if (!$path)
		$path = 'ISO-639-2_utf-8.txt';

	$src = fopen($path, "r");

	while (false !== ($line = fgets($src)))
	{
		if ("\xef" == $line[0] && "\xbb" == $line[1] && "\xbf" == $line[2])
			$line = substr($line, 3);

		if (preg_match('/^qaa-qtz/', $line)) /* this is the "private use area"; skip it! */
			continue;

		$arr = explode('|', $line);

		/* 1st col. has the "B" form, if there are two. */
		$name = $french ? trim($arr[4]) : $arr[3];

		if (isset($name_fixer[$name]))
			$name = $name_fixer[$name];
		else if (false !== strpos($name, ';'))
			list($name) = explode(';', $name);

		/* main entry */
		$three_to_name[$arr[0]] = $name;

		/* is there a "T" form?  if so create duplicate entry */
		if (!empty($arr[1]))
			$three_to_name[$arr[1]] = $name;

		/* is a 2-char code? */
		if (!empty($arr[2]))
			$two_to_three[$arr[2]] = (empty($arr[1]) ? $arr[0] : $arr[1]);
		/* if T is specified, use that as the target for the 2-to-3 map rather than B */
	}

	fclose($src);


	ksort($three_to_name);
	ksort($two_to_three);

	echo '$mapper_for_3_code_to_name = '
		,  var_export($three_to_name)
		, ";\n\n"
		, '$mapper_for_2_code_to_3 = '
		,  var_export($two_to_three)
		, ";\n\n"
		;
}




